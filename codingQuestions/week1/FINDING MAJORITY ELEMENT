APPROACH 1
#include <bits/stdc++.h>
using namespace std;
 
int findMajorityElement(int arr[], int n) {
   for (int i = 0; i < n; i++) {
       int count = 0;
       for (int j = 0; j < n; j++) {
           if (arr[i] == arr[j])
               count++;
       }
       if (count > n / 2)
           return arr[i];
   }
   return -1;
}
int main() {
   int arr[] = {2, 2, 1, 2, 1, 2, 1};
   int n = sizeof(arr) / sizeof(arr[0]);
   cout << findMajorityElement(arr, n);
   return 0;
}

APPROACH 2
#include <bits/stdc++.h>
using namespace std;
int findMajorityElement(int arr[], int n) {
   unordered_map <int,int> m;
   for (int i = 0; i < n; i++) {
       if (m.find(arr[i]) == m.end())
           m[arr[i]] = 1;
       else
           m[arr[i]]++;
 
       if (m[arr[i]] > n / 2)
           return arr[i];
   }
   return -1;
}
int main() {
   int arr[] = {2, 2, 1, 2, 1, 2, 1};
   int n = sizeof(arr) / sizeof(arr[0]);
   cout << findMajorityElement(arr, n);
   return 0;
}

APPROACH 3
#include <iostream>
using namespace std;
 
/* Function to find the candidate for Majority */
int findCandidate(int a[], int n){
   int maj_index = 0, count = 1;
   for (int i = 1; i < n; i++) {
       if (a[maj_index] == a[i])
           count++;
       else
           count--;
       if (count == 0) {
           maj_index = i;
           count = 1;
       }
   }
   return a[maj_index];
}
 
/* Function to check if the candidate occurs more than n/2 times */
int isMajority(int a[], int n, int cand) {
   int i, count = 0;
   for (i = 0; i < n; i++)
       if (a[i] == cand)
           count++;
   if (count > n / 2)
       return cand;
   else
       return -1;
}
 
void findMajorityElement(int a[], int size) {
   /* Find the candidate for Majority*/
   int cand = findCandidate(a, size);
 
   /* Print the candidate if it is Majority*/
   cout << isMajority(a, size, cand) << endl;
}
 
C
#include <stdio.h>
/* Function to find the candidate for Majority */
int findCandidate(int a[], int n){
   int maj_index = 0, count = 1;
   for (int i = 1; i < n; i++) {
       if (a[maj_index] == a[i])
           count++;
       else
           count--;
       if (count == 0) {
           maj_index = i;
           count = 1;
       }
   }
   return a[maj_index];
}
 
/* Function to check if the candidate occurs more than n/2 times */
int isMajority(int a[], int n, int cand) {
   int count = 0;
   for (int i = 0; i < n; i++)
       if (a[i] == cand)
           count++;
   if (count > n / 2)
       return cand;
   else
       return -1;
}
 
void findMajorityElement(int a[], int size) {
   /* Find the candidate for Majority*/
   int cand = findCandidate(a, size);
 
   /* Print the candidate if it is Majority*/
   printf("%d", isMajority(a, size, cand));
}
 
int main(){
   int a[] = { 2, 2, 1, 2, 1, 2, 1 };
   int n = (sizeof(a)) / sizeof(a[0]);
   findMajorityElement(a, n);
   return 0;
}
PYTHON
def findCandidate(a,n):
  maj_index = 0;count = 1
  for i in range(1,n):
    if (a[maj_index] == a[i]):
      count+=1;
    else:
      count-=1;
    if (count == 0):
      maj_index = i;
      count = 1;
  return a[maj_index];

def isMajority(a,size,cand):
  count = a.count(cand)
  return cand if( count > size//2) else -1

def findMajorityElement(a,size):
  candidate = findCandidate(a,size)
  print(isMajority(a,size,candidate))

if __name__ == "__main__":
  a = [ 2, 2, 1, 2, 1, 2, 1 ]
  n = len(a)
  findMajorityElement(a, n)
  
JAVA
import java.util.*;
import java.lang.*;
import java.io.*;
public class Main {
   /* Function to find the candidate for Majority */
   static int findCandidate(int a[], int size){
       int maj_index = 0, count = 1;
       int i;
       for (i = 1; i < size; i++) {
           if (a[maj_index] == a[i])
               count++;
           else
               count--;
           if (count == 0) {
               maj_index = i;
               count = 1;
           }
       }
       return a[maj_index];
   }
 
   /* Function to check if the candidate occurs more than n/2 times */
   static int isMajority(int a[], int size, int cand) {
       int i, count = 0;
       for (i = 0; i < size; i++) {
           if (a[i] == cand)
               count++;
       }
       if (count > size / 2)
           return cand;
       else
           return -1;
   }
 
   /* Function to print Majority Element */
   static void findMajorityElement(int a[], int size) {
       /* Find the candidate for Majority*/
       int cand = findCandidate(a, size);
 
       /* Print the candidate if it is Majority*/
       System.out.println(isMajority(a, size, cand));
   }
 
   public static void main(String[] args) {
       int a[] = new int[] { 2, 2, 1, 2, 1, 2, 1 };
       int n = a.length;
       findMajorityElement(a, n);
   }
}
